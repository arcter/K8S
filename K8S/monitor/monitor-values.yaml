kube-prometheus-stack:
  kubeEtcd:
    service:
      port: 2381
      targetPort: 2381
  rules:
    kubeProxy: false
  kubeProxy:
    enabled: false # Cilium does this using eBPF
  prometheusOperator:
    priorityClassName: "infra-monitoring"
  prometheus:
    prometheusSpec:
      priorityClassName: "infra-monitoring"
      initContainers:
        # Ownership has to be set on the data dir,
        # because of some CSI Storage class
        - name: init-chown-data
          image: busybox:1.34.1
          command:
            - chown
            - -R
            - 65534:65534
            - /mnt
          volumeMounts:
            - name: kube-prometheus-prometheus-db
              mountPath: /mnt
              subPath: prometheus-db
          securityContext:
            runAsUser: 0
            runAsGroup: 0
            runAsNonRoot: false
      storageSpec:
        volumeClaimTemplate:
          metadata:
            name: kube-prometheus-prometheus-db
          spec:
            storageClassName: rook-ceph-block
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 20Gi
      securityContext:
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534

  alertmanager:
    alertmanagerSpec:
      priorityClassName: "infra-monitoring"
      externalUrl: https://alertmanager.k8s.arcter
    config:
      global:
        resolve_timeout: 5m
      route:
        group_by: ["job"]
        group_wait: 30s
        group_interval: 5m
        repeat_interval: 12h
        receiver: Default
        routes:
          - match:
              alertname: Watchdog
            receiver: Watchdog
          - matchers:
              - severity=~"warning|critical"
            receiver: Mattermost
            group_wait: 10s
      #      receivers: - set in values.yaml.secret
      #      - name: Default
      #      - name: Mattermost
      #        slack_configs:
      #        - api_url: https://mattermost.kszk.bme.hu/hooks/ SECRET
      #          channel: "#alerts-k8s"
      #          username: '{{ template "slack.default.username" . }}'
      #          color: '{{ if eq .Status "firing" }}danger{{ else }}good{{ end }}'
      #          title: '{{ template "slack.default.title" . }}'
      #          title_link: '{{ template "slack.default.titlelink" . }}'
      #          pretext: '{{ .CommonAnnotations.summary }}'
      #          text: |-
      #            {{ range .Alerts }}
      #              *Alert:* {{ .Annotations.summary }} - `{{ .Labels.severity }}`
      #              *Description:* {{ .Annotations.description }}
      #              *Details:*
      #              {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
      #              {{ end }}
      #            {{ end }}
      #          fallback: '{{ template "slack.default.fallback" . }}'
      #          icon_emoji: '{{ template "slack.default.iconemoji" . }}'
      #          icon_url: '{{ template "slack.default.iconurl" . }}'
      #      - name: Critical
      #        pagerduty_configs:
      #        - service_key: SECRET
      #          url: https://events.eu.pagerduty.com/generic/2010-04-15/create_event.json
      #      - name: Watchdog
      templates:
        - "/etc/alertmanager/config/*.tmpl"

  grafana:
    deploymentStrategy:
      type: Recreate

    persistence:
      enabled: true
      storageClassName: rook-ceph-block
      accessModes: ["ReadWriteOnce"]
      size: 1Gi

    sidecar:
      dashboards: # Automatically import configmaps with the specified label
        enabled: true
        label: grafana_dashboard
        searchNamespace: monitoring

    grafana.ini:
      paths:
        data: /var/lib/grafana/
        logs: /var/log/grafana
        plugins: /var/lib/grafana/plugins
        provisioning: /etc/grafana/provisioning
      analytics:
        check_for_updates: true
      log:
        mode: console
        # level: debug
      grafana_net:
        url: https://grafana.net
      auth:
        allow_sign_up: false
        auto_assign_org: true
        auto_assign_org_role: Viewer
        disable_login_form: false
      server:
        root_url: https://grafana.k8s.arcter
      smtp:
        enabled: false # TODO

    ingress:
      enabled: true
      path: /
      pathType: ImplementationSpecific
      hosts:
        - grafana.k8s.arcter
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        kubernetes.io/ingress.class: nginx
        kubernetes.io/tls-acme: "true"
      tls:
        - secretName: grafana-cert
          hosts:
            - grafana.k8s.arcter

  prometheus-node-exporter:
    tolerations:
      - effect: NoSchedule
        operator: Exists
      - key: "CriticalAddonsOnly"
        operator: "Equal"
        value: "true"
        effect: "NoExecute"
      - key: node-role.kubernetes.io/controlplane
        value: "true"
        effect: NoSchedule
